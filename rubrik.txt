Online Pharmacy System Implementation Rubrik
=============================================

This document outlines the implementation status of required features according to the project rubrik.

(I) Overloaded methods (minimum 2)
----------------------------------
✅ IMPLEMENTED
- model.Doctor: Contains overloaded prescribe() methods
  - prescribe() with arrays of medicines and quantities
  - prescribe() with Map<Medicine, Integer>
- model.Cart: Contains multiple addToCart() overloaded methods
  - addToCart(Medicine m, int quantity)
  - addToCart(Prescription prescription)
  - addToCart(Map<Medicine, Integer> m)

(II) Overloaded constructors (minimum 2)
----------------------------------------
✅ IMPLEMENTED
- model.Prescription: Has multiple constructors with different parameters
- model.Order.EmergencyOrder: Has two constructors, one taking a Map and one taking varargs
- model.Doctor: Has multiple constructors

(III) Vararg overloading (minimum 2)
------------------------------------
✅ IMPLEMENTED
- model.Cart: Has vararg overloaded addToCart:
  - addToCart(Medicine... meds)
  - addToCart(Prescription... prescriptions)
- model.Inventory: Has two addToInventory methods with varargs implementation
  - addToInventory(Medicine... m)
  - addToInventory(int amount, Medicine... m)

(IV) Nested classes (static or nonstatic, atleast 1)
---------------------------------------------------
✅ IMPLEMENTED
- model.Order: Contains EmergencyOrder as a static nested class

(V) Abstract class (minimum 1)
-----------------------------
✅ IMPLEMENTED
- model.User: Abstract base class for Patient, Doctor, and Admin classes
- Implements common functionality for user authentication and credentials

(VI) Interface (minimum 1)
-------------------------
✅ IMPLEMENTED
- view.MenuUtils: Interface providing utility methods for display formatting and screen management
- view.Menu: Interface that extends MenuUtils and provides menu navigation and user input methods
- service.DataManager: Interface with static methods for data operations
- view.PatientMenu, view.DoctorMenu, view.AdminMenu: All implement Menu, MenuUtils interface

(VII) Hierarchical Inheritance (atleast 1)
-----------------------------------------
✅ IMPLEMENTED
- model.User → model.Patient, model.Doctor, model.Admin
- Demonstrates hierarchical inheritance with common base class User and multiple derived classes

(VIII) Multiple Inheritance (atleast 1)
--------------------------------------
✅ IMPLEMENTED
- Menu interfaces demonstrate multiple inheritance
- view.PatientMenu, view.DoctorMenu, view.AdminMenu all implement view.Menu and view.MenuUtils

(IX) Wrappers
------------
✅ IMPLEMENTED
- Integer, Boolean, and other wrapper classes are used throughout the codebase
- For example, in view.Menu.getIntInput() method for parsing input
- Used in model.Inventory with HashMap<Medicine, Integer> to store quantity data

(X) Package
----------
✅ IMPLEMENTED
- Classes are organized into proper packages:
  - model: Contains data entities (User, Patient, Doctor, Admin, Medicine, etc.)
  - view: Contains UI components (MenuUtils, Menu, MainMenu, PatientMenu, etc.)
  - service: Contains business logic (DataManager, SessionManager, OrderService)
  - main: Contains the Pharmacy main class and Driver

(XI) Exception handling (atleast two cases)
------------------------------------------
✅ IMPLEMENTED
- service.DataManager: Contains exception handling for file operations
- view.MenuUtils: Contains exception handling for screen clearing operation
- view.Menu: Contains exception handling for user input
- Try-catch blocks are used in multiple files for handling potential runtime exceptions

(XII) I/O: File Handling, scanner class etc.
-------------------------------------------
✅ IMPLEMENTED
- File Handling: service.DataManager implements file I/O using ObjectInputStream and ObjectOutputStream
- Scanner: Scanner class is used in view.Menu implementation for user input
- Multiple I/O operations in service.DataManager for loading and saving system data